package com.union_find.leetcode924;

import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;

/**
 * 在节点网络中，只有当 graph[i][j] = 1 时，每个节点 i 能够直接连接到另一个节点 j。
 * <p>
 * 一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。
 * <p>
 * 假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。
 * <p>
 * 我们可以从初始列表中删除一个节点。如果移除这一节点将最小化 M(initial)， 则返回该节点。如果有多个节点满足条件，就返回索引最小的节点。
 * <p>
 * 请注意，如果某个节点已从受感染节点的列表 initial 中删除，它以后可能仍然因恶意软件传播而受到感染。
 * <p>
 *  
 * <p>
 * 示例 1：
 * <p>
 * 输入：graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * 输出：0
 * 示例 2：
 * <p>
 * 输入：graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
 * 输出：0
 * 示例 3：
 * <p>
 * 输入：graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
 * 输出：1
 *  
 * <p>
 * 提示：
 * <p>
 * 1 < graph.length = graph[0].length <= 300
 * 0 <= graph[i][j] == graph[j][i] <= 1
 * graph[i][i] == 1
 * 1 <= initial.length < graph.length
 * 0 <= initial[i] < graph.length
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/minimize-malware-spread
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class MinMalwareSpread {


    public int minMalwareSpread(int[][] graph, int[] initial) {

        int len = graph.length;
        UnionFind unionFind = new UnionFind(len);
        for (int i = 0; i < len; i++) {
            for (int j = i + 1; j < len; j++) {
                if (graph[i][j] == 1) {
                    unionFind.union(i, j);
                }
            }
        }

        int[] initialNum = new int[len];

        for (int i = 0; i < initial.length; i++) {
            initialNum[unionFind.find(initial[i])]++;
        }


        Arrays.sort(initial);
        int[] mal = new int[initial.length];
        for (int i = 0; i < initial.length; i++) {
            if (initialNum[unionFind.find(initial[i])] > 1) {
                mal[i] = 0;
            } else {
                mal[i] = unionFind.count(initial[i]);
            }
        }

        int max = mal[0];
        int ans = initial[0];
        for (int i = 0; i < initial.length; i++) {
            if (mal[i] > max) {
                max = mal[i];
                ans = initial[i];
            }
        }


        return ans;

    }


    private class UnionFind {
        private int[] parent;
        private int[] rank;
        private int[] circle;

        public UnionFind(int num) {
            this.parent = new int[num];

            this.rank = new int[num];
            this.circle = new int[num];

            for (int i = 0; i < num; i++) {
                parent[i] = -1;
            }

            for (int i = 0; i < num; i++) {
                circle[i] = 1;
            }


        }

        public int find(int node) {
            while (parent[node] != -1) {
                node = parent[node];
            }
            return node;
        }

        public int count(int node) {
            int root = find(node);
            return circle[root];
        }


        public boolean union(int x, int y) {
            int xRoot = find(x);
            int yRoot = find(y);
            if (xRoot == yRoot) {
                return false;
            } else {
                if (rank[xRoot] < rank[yRoot]) {
                    parent[xRoot] = yRoot;
                    circle[yRoot] = circle[xRoot] + circle[yRoot];
                } else if (rank[xRoot] > rank[yRoot]) {
                    parent[yRoot] = xRoot;
                    circle[xRoot] = circle[xRoot] + circle[yRoot];
                } else {
                    parent[xRoot] = yRoot;
                    rank[yRoot]++;
                    circle[yRoot] = circle[xRoot] + circle[yRoot];
                }

                return true;

            }

        }
    }
}
