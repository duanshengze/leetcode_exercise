package com.union_find.leetcode924;

import java.util.Arrays;

public class MinMalwareSpread0506 {

    public int minMalwareSpread(int[][] graph, int[] initial) {

        int xLen = graph.length;
        int ylen = graph[0].length;

        UnionFind unionFind = new UnionFind(xLen);

        for (int i = 0; i < xLen; i++) {

            for (int j = i + 1; j < ylen; j++) {
                if (graph[i][j] == 1) {
                    unionFind.union(i, j);
                }
            }
        }

        int[] initialCount = new int[xLen];

        int[] initialRoot = new int[xLen];


        for (int i = 0; i < initial.length; i++) {
            int root = unionFind.find(initial[i]);
            initialRoot[initial[i]] = root;
            initialCount[root]++;
        }

        Arrays.sort(initial);

        int max = 0;
        int ans = initial[0];
        for (int i = 0; i < initial.length; i++) {
            int root = initialRoot[initial[i]];
            if (initialCount[root] > 1) {
                continue;
            }
            int count = unionFind.countRoot(root);
            if (count > max) {
                max = count;
                ans = initial[i];
            }
        }

        return ans;

    }


    private class UnionFind {
        private int[] parent;
        private int[] count;

        public UnionFind(int num) {
            parent = new int[num];
            count = new int[num];

            for (int i = 0; i < num; i++) {
                parent[i] = -1;
                count[i] = 1;
            }
        }


        private int find(int node) {
            while (parent[node] != -1) {
                node = parent[node];
            }
            return node;
        }

        public boolean union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if (rootX == rootY) {
                return false;
            } else {
                parent[rootX] = rootY;
                int sum = count[rootX] + count[rootY];
                count[rootX] = sum;
                count[rootY] = sum;
                return true;
            }
        }

        public int countRoot(int root) {

            return count[root];
        }

    }
}
