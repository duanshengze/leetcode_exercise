package com.union_find.leetcode924;

import java.util.Arrays;

public class MinMalwareSpread0513 {


    public int minMalwareSpread(int[][] graph, int[] initial) {

        int xLen = graph.length;
        int yLen = graph[0].length;

        UnionFind unionFind = new UnionFind(xLen);

        for (int i = 0; i < xLen; i++) {

            for (int j = i + 1; j < yLen; j++) {
                if (graph[i][j] == 1) {
                    unionFind.union(i, j);
                }

            }

        }

        int[] initialNum = new int[xLen];

        for (int i = 0; i < initial.length; i++) {
            initialNum[unionFind.find(initial[i])]++;
        }


        int[] count = new int[xLen];

        for (int i = 0; i < initial.length; i++) {
            if (initialNum[unionFind.find(initial[i])] > 1) {
                count[initial[i]] = 0;
            } else {
                count[initial[i]] = unionFind.getCount(initial[i]);
            }
        }

        int node = initial.length == 0 ? 0 : initial[0];
        int max = count[node];
        for (int i = 0; i < initial.length; i++) {
            if (max < count[initial[i]]) {
                node = initial[i];
                max = count[initial[i]];
            } else if (max == count[initial[i]]) {
                if (node > initial[i]) {
                    node = initial[i];
                }
            }
        }


        return node;

    }

    private class UnionFind {
        private int[] parent;

        private int[] count;

        public UnionFind(int num) {

            parent = new int[num];
            count = new int[num];
            for (int i = 0; i < num; i++) {
                parent[i] = -1;
                count[i] = 1;
            }
        }

        public int find(int node) {
            while (parent[node] != -1) {
                node = parent[node];
            }
            return node;
        }

        public boolean union(int x, int y) {
            int xRoot = find(x);
            int yRoot = find(y);

            if (xRoot != yRoot) {

                int sum = count[xRoot] + count[yRoot];
                count[xRoot] = sum;
                count[yRoot] = sum;
                parent[xRoot] = yRoot;
                return true;
            } else {
                return false;
            }

        }

        public int getCount(int node) {
            int root = find(node);
            return count[root];
        }
    }
}
